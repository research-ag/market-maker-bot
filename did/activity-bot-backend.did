type TokenDescription = record {
  decimals : nat32;
  "principal" : principal;
  symbol : text;
};
type Time = int;
type OrderInfo = record {
  amount : nat;
  price : float64;
};
type MarketPairStrategy = vec record {
  record {
    float64;
    float64;
  };
  float64;
};
type MarketPairShared = record {
  base : TokenDescription;
  base_credits : nat;
  quote_credits : nat;
  strategy : MarketPairStrategy;
};
type HistoryItemTypeV4 = record {
  bidOrder : opt OrderInfo;
  message : text;
  pair : opt MarketPairShared;
  rate : opt float64;
  timestamp : Time;
};
type BotState = record {
  initialized : bool;
  initializing : bool;
  quote_token : opt principal;
  running : bool;
  supported_tokens : vec principal;
  timer_interval : nat;
};

service : (opt principal, opt principal) -> {

  // PUBLIC API
  getBotState : () -> (BotState) query;
  getHistory : (opt principal, nat, nat) -> (vec HistoryItemTypeV4) query;
  getPairsList : () -> (vec MarketPairShared) query;
  getQuoteInfo : () -> (TokenDescription) query;
  listAdmins : () -> (vec principal) query;
  notifyQuote : () -> ();

  // ADMIN API
  addAdmin : (principal) -> ();
  executeActivityBot : () -> ();
  notify : (opt principal) -> ();
  removeAdmin : (principal) -> ();
  startBot : (nat) -> (
    variant {
      Err : variant {
        AlreadyStartedError;
        NotInitializedError;
      };
      Ok : BotState;
    }
  );
  stopBot : () -> (
    variant {
      Err : variant {
        AlreadyStopedError;
        CancelOrdersError;
        NotInitializedError;
      };
      Ok : BotState;
    }
  );
  transfer_base_credits : (principal) -> (text);

  // SYSTEM API

  // should be called after first installation only
  init : () -> (
    variant {
      Err : variant {
        AlreadyInitializedError;
        InitializingInProgressError;
        UnknownError;
        UnknownQuoteTokenError;
      };
      Ok : BotState;
    }
  );
  migrate_auction_credits : (principal, principal) -> (text);
  notify_another_auction : (principal) -> ();
};
